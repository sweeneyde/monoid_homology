from itertools import combinations, product
import random

from monoid_homology import (
    CRS,
    all_ix_op_pairs,
    ix_op_pairs_from_ids,
    op_from_id,
    find_best_gens_crs,
    kb_normalize,
)

from monoid_homology.from_table import (
    string_to_op,
    representation_by_generators,
    all_gens_crs,
    crs_from_gens,
)

from monoid_homology.knuth_bendix import (
    kb_complete
)

from monoid_homology.structure_utils import (
    normal_subgroup_generated_by,
    group_identity_and_inverses,
    group_quotient,
    product_op,
    table_from_opfunc_and_set,
    get_kernel_structure,
    group_completion,
    # get_kernel_height_width_G,
    # restrict_to_subset,
    # thin_equivalent,
    # op_has_ptorsion,
)

import pytest

def test_crs_homology():
    # Uses Sympy because it's hard to set up CI for SAGE.

    trivial = CRS("", [])
    assert trivial.sympy_rational_homology_ranks(4) == [1, 0, 0, 0, 0]

    NxN = CRS("xy", [("yx", "xy")])
    assert NxN.sympy_rational_homology_ranks(3) == [1, 2, 1, 0]

    NxNxN = CRS("xyz", [("yx", "xy"), ("zx", "xz"), ("zy", "yz")])
    assert NxNxN.sympy_rational_homology_ranks(3) == [1, 3, 3, 1]

    Z = CRS("xy", [("xy", ""), ("yx", "")])
    assert Z.sympy_rational_homology_ranks(3) == [1, 1, 0, 0]

    Free2 = CRS("xy", [])
    assert Free2.sympy_rational_homology_ranks(3) == [1, 2, 0, 0]

    Z3 = CRS("x", [("xxx", "")])
    assert Z3.sympy_rational_homology_ranks(3) == [1, 0, 0, 0]

    # Rectangular bands
    rect22 = CRS("xy", [("xx", "x"), ("yy", "y"), ("xyx", "x"), ("yxy", "y")])
    assert rect22.sympy_rational_homology_ranks(4) == [1, 0, 1, 0, 0]

    rect33 = CRS("xyz", [(a+a, a) for a in "xyz"] +
                        [(a+b+a, a) for (a, b) in "xy xz yx yz zx zy".split()] +
                        [(a+b+c, a+c) for (a, b, c) in "xyz xzy yxz yzx zxy zyx".split()])
    assert rect33.sympy_rational_homology_ranks(3) == [1, 0, 4, 0]


def test_crs_essentials():
    rect22 = CRS("xy", [("xx", "x"), ("yy", "y"), ("xyx", "x"), ("yxy", "y")])
    rect22.compute_essentials(3)
    for dim, ess_set in {
        0: {()},
        1: {("x",), ("y",)},
        2: {("x", "x"), ("x", "yx"), ("y", "y"), ("y", "xy")},
        3: {
            ("x", "x", "x"), ("x", "x", "yx"),
            ("y", "y", "y"), ("y", "y", "xy"),
            ("x", "yx", "y"), ("x", "yx", "x"),
            ("y", "xy", "y"), ("y", "xy", "x"),
        }
    }.items():
        assert set(rect22.essentials[dim]) == ess_set

    Z = CRS("xy", [("xy", ""), ("yx", "")])
    Z.compute_essentials(3)
    for dim, ess_set in {
        0: {()},
        1: {("x",), ("y",)},
        2: {("x", "y"), ("y", "x")},
        3: {("x", "y", "x"), ("y", "x", "y")},
    }.items():
        assert set(Z.essentials[dim]) == ess_set

def test_all_ix_op_pairs():
    assert list(all_ix_op_pairs(1)) == [
        (1, [[0]]),
    ]
    assert list(all_ix_op_pairs(2)) == [
        (1, [[0, 0], [0, 0]]),
        (2, [[0, 1], [1, 0]]),
        (3, [[0, 0], [0, 1]]),
        (4, [[0, 0], [1, 1]]),
    ]
    assert list(all_ix_op_pairs(3)) == [
        ( 1, [[0, 0, 0], [0, 0, 0], [0, 0, 0]]),
        ( 2, [[0, 0, 2], [0, 0, 2], [2, 2, 0]]),
        ( 3, [[0, 1, 1], [1, 0, 0], [1, 0, 0]]),
        ( 4, [[0, 0, 0], [0, 0, 0], [0, 0, 1]]),
        ( 5, [[0, 0, 0], [0, 0, 0], [0, 0, 2]]),
        ( 6, [[0, 0, 0], [0, 0, 0], [0, 1, 2]]),
        ( 7, [[0, 0, 0], [0, 0, 0], [2, 2, 2]]),
        ( 8, [[0, 0, 0], [0, 0, 1], [0, 1, 2]]),
        ( 9, [[0, 0, 2], [0, 0, 2], [2, 2, 2]]),
        (10, [[0, 1, 0], [1, 0, 1], [0, 1, 2]]),
        (11, [[0, 1, 2], [1, 0, 2], [2, 2, 2]]),
        (12, [[0, 0, 0], [0, 1, 0], [0, 0, 2]]),
        (13, [[0, 0, 0], [0, 1, 0], [2, 2, 2]]),
        (14, [[0, 0, 0], [0, 1, 1], [0, 1, 2]]),
        (15, [[0, 0, 0], [0, 1, 1], [0, 2, 2]]),
        (16, [[0, 0, 0], [0, 1, 2], [2, 2, 2]]),
        (17, [[0, 0, 0], [1, 1, 1], [2, 2, 2]]),
        (18, [[0, 1, 2], [1, 2, 0], [2, 0, 1]]),
    ]
    for n in (1, 2, 3):
        for ix, op in all_ix_op_pairs(n):
            for i in range(n):
                for j in range(n):
                    for k in range(n):
                        assert op[op[i][j]][k] == op[i][op[j][k]]

def test_op_from_id():
    assert op_from_id(1, 1) == [[0]]
    assert op_from_id(2, 1) == [[0, 0], [0, 0]]
    assert op_from_id(3, 1) == [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    assert op_from_id(3, 18) == [[0, 1, 2], [1, 2, 0], [2, 0, 1]]
    assert op_from_id(7, 836_021) == [[0, 1, 2, 3, 4, 4, 3], [1, 2, 4, 0, 3, 3, 0], [2, 4, 3, 1, 0, 0, 1], [3, 0, 1, 4, 2, 2, 4], [4, 3, 0, 2, 1, 1, 2], [4, 3, 0, 2, 1, 1, 2], [3, 0, 1, 4, 2, 2, 5]]

    [(ix, op)] = ix_op_pairs_from_ids(8, {7850615})
    assert ix == 7850615
    assert op == [[0, 0, 0, 0, 0, 0, 6, 6], [0, 0, 0, 0, 0, 0, 6, 6], [0, 0, 0, 0, 0, 0, 6, 6], [0, 0, 0, 0, 0, 0, 6, 6], [0, 0, 2, 3, 4, 0, 6, 6], [5, 5, 5, 5, 5, 5, 7, 7], [0, 0, 0, 0, 0, 0, 6, 6], [5, 5, 5, 5, 5, 5, 7, 7]]

    [(ix, op)] = ix_op_pairs_from_ids(8, {11433085})
    assert ix == 11433085
    assert op == [[0, 1, 2, 2, 1, 1, 1, 1], [1, 2, 0, 0, 2, 2, 2, 2], [2, 0, 1, 1, 0, 0, 0, 0], [2, 0, 1, 1, 0, 0, 0, 0], [1, 2, 0, 0, 3, 2, 3, 3], [1, 2, 0, 0, 3, 3, 3, 3], [1, 2, 0, 0, 3, 3, 3, 3], [1, 2, 0, 0, 3, 3, 3, 3]]

    pairs = ix_op_pairs_from_ids(8, {2808, 2809, 2810, 2811, 2812, 11362185, 11362131, 11362130, 11362129, 11362064})
    # Make sure that the minimal subgroup of these has order 2.
    for ix, op in pairs:
        p = 0
        for x in range(1, 8):
            p = op[p][x]
        Lp = {p} | {op[x][p] for x in range(8)}
        Rp = {p} | {op[p][x] for x in range(8)}
        Hp = Lp & Rp
        assert len(Hp) == 2, ix

def all_gens_crs():
    z3 = all_gens_crs([[(i+j)%3 for i in range(3)] for j in range(3)])
    z3.compute_essentials(3)
    assert z3.alphabet == "ABC"
    assert set(z3.relations) == {("AA", "A"), ("AB", "B"), ("AC", "C"),
                                 ("BA", "B"), ("BB", "C"), ("BC", "A"),
                                 ("CA", "C"), ("CB", "A"), ("CC", "B")}
    assert set(z3.essentials[0]) == {()}
    assert set(z3.essentials[1]) == {("A",), ("B",), ("C",)}
    assert set(z3.essentials[2]) == {(i, j) for i in "ABC" for j in "ABC"}

    rect22 = all_gens_crs([[(i&2) | (j&1) for j in range(4)] for i in range(4)])
    assert rect22.alphabet == "ABCD"
    assert set(rect22.essentials[0]) == {()}
    assert set(rect22.essentials[1]) == {(i,) for i in "ABCD"}
    assert set(rect22.essentials[1]) == {(i, j) for i in "ABCD" for j in "ABCD"}

def test_crs_from_gens():
    z3_op = [[(i+j)%3 for i in range(3)] for j in range(3)]
    # 0 doesn't generate Z/3Z.
    assert list(crs_from_gens(z3_op, [0], extra=0)) == []

    [z3_1] = crs_from_gens(z3_op, [1], extra=0)
    assert z3_1.alphabet == "B"
    assert set(z3_1.rules) == {("BBBB", "B")}
    z3_1.compute_essentials(3)
    assert set(z3_1.essentials[1]) == {("B",)}
    assert set(z3_1.essentials[2]) == {("B", "BBB")}
    assert set(z3_1.essentials[3]) == {("B", "BBB", "B")}

    [z3_01] = crs_from_gens(z3_op, [0, 1], extra=0)
    assert z3_01.alphabet == "AB"
    assert set(z3_01.rules) == {("BBB", "A"), ("AB", "B"), ("BA", "B"), ("AA", "A")}
    z3_01.compute_essentials(3)
    assert set(z3_01.essentials[1]) == {("A",), ("B",)}
    assert set(z3_01.essentials[2]) == {("A", "A"), ("A", "B"), ("B", "BB"), ("B", "A")}
    assert set(z3_01.essentials[3]) == {("A", "A", "A"), ("A", "A", "B"),
                                        ("A", "B", "BB"), ("A", "B", "A"),
                                        ("B", "BB", "B"), ("B", "BB", "A"),
                                        ("B", "A", "B"), ("B", "A", "A")}


def test_all_gen_sets_give_same_ranks():
    table_ranks = [
        ((3, 10),   [1, 0, 0, 0]),
        ((4, 123),  [1, 0, 1, 0]),
        ((5, 917),  [1, 0, 1, 1]),
        ((5, 1142), [1, 0, 1, 0]),
        ((6, 8713), [1, 0, 1, 2]),
        ((6, 15870), [1, 0, 0, 1]),
    ]
    for (n, i), ranks in table_ranks:
        op = op_from_id(n, i)
        for num_gens in range(0, n + 1):
            for gens in combinations(range(n), num_gens):
                for crs in crs_from_gens(op, gens, extra=0):
                    assert crs.sympy_rational_homology_ranks(3) == ranks
        assert find_best_gens_crs(op, 3).sympy_rational_homology_ranks(3) == ranks

def test_kb_eliminate_redundant_generators():
    # Make sure to normalize so no single-letters are reducible.

    # Direct test
    assert kb_normalize("AB", [("B", "A")]) == ("A", [])

    # Make sure that "B" gets deleted in this odd situation
    rules = [
        ('AA', 'A'), ('AB', 'A'), ('AC', 'A'),
        ('BA', 'A'), ('BB', 'A'), ('BC', 'B'),
        ('CA', 'A'), ('CB', 'B'), ('CC', 'A')
    ]
    assert kb_complete(rules[:]) == [('AA', 'A'), ('AC', 'A'), ('CA', 'A'), ('CC', 'A'), ('B', 'A')]
    assert kb_normalize('ABC', rules[:]) == ('AC', [('AA', 'A'), ('AC', 'A'), ('CA', 'A'), ('CC', 'A')])

    # The example that caught the bug
    find_best_gens_crs([[0, 0, 0], [0, 0, 1], [0, 1, 0]], maxdim=4, extra=2)

def test_non_noetherian():
    crs = CRS("ABC", [("ABB", "ABA"), ("AC", "BCC")], max_rewrites=10_000)
    culprit = "ABBC"
    # ABBC
    # ABAC
    # ABBCC
    # ABACC
    # ABBCCC
    # ABACCC
    # ABBCCCC
    # ABACCCC
    # ...
    msg = f"No fixed point was found for {culprit} after 10000 iterations"
    with pytest.raises(RuntimeError, match=msg):
        crs.reduce(culprit)


def shuffle_op_elements(op):
    rn = range(len(op))
    f = list(rn)
    random.shuffle(f)
    g = [None for _ in rn]
    for i, x in enumerate(f):
        g[x] = i
    for x in rn:
        assert f[g[x]] == g[f[x]] == x
    return [
        [
            f[op[g[i]][g[j]]]
            for j in rn
        ]
        for i in rn
    ]

A5 = [
    [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],
    [1,3,4,6,7,8,11,12,13,14,15,0,18,19,20,21,22,23,2,26,27,28,29,30,31,24,5,35,36,37,38,39,40,32,16,9,10,34,45,46,47,48,49,41,42,17,25,52,53,54,55,50,33,57,58,59,51,43,44,56],
    [2,5,0,9,10,1,16,17,18,3,4,15,24,25,26,11,6,7,8,32,33,34,35,36,12,13,14,41,42,43,44,45,19,20,21,22,23,49,50,51,46,27,28,29,30,31,40,56,52,37,38,39,48,59,57,58,47,54,55,53],
    [3,6,7,11,12,13,0,18,19,20,21,1,2,26,27,28,29,30,4,5,35,36,37,38,39,31,8,9,10,34,45,46,47,40,22,14,15,16,17,25,52,53,54,48,49,23,24,33,57,58,59,55,32,43,44,56,50,41,42,51],
    [4,8,1,14,15,3,22,23,2,6,7,21,31,24,5,0,11,12,13,40,32,16,9,10,18,19,20,48,49,41,42,17,26,27,28,29,30,54,55,50,25,35,36,37,38,39,47,51,33,34,45,46,53,56,43,44,52,58,59,57],
    [5,9,10,16,17,18,15,24,25,26,11,2,8,32,33,34,35,36,0,14,41,42,43,44,45,12,1,22,23,49,50,51,46,19,6,3,4,21,31,40,56,52,37,27,28,7,13,48,59,57,58,38,20,54,55,53,39,29,30,47],
    [6,11,12,0,18,19,1,2,26,27,28,3,4,5,35,36,37,38,7,8,9,10,34,45,46,39,13,14,15,16,17,25,52,47,29,20,21,22,23,24,33,57,58,53,54,30,31,32,43,44,56,59,40,41,42,51,55,48,49,50],
    [7,13,3,20,21,6,29,30,4,11,12,28,39,31,8,1,0,18,19,47,40,22,14,15,2,26,27,53,54,48,49,23,5,35,36,37,38,58,59,55,24,9,10,34,45,46,52,50,32,16,17,25,57,51,41,42,33,44,56,43],
    [8,14,15,22,23,2,21,31,24,5,0,4,13,40,32,16,9,10,1,20,48,49,41,42,17,18,3,29,30,54,55,50,25,26,11,6,7,28,39,47,51,33,34,35,36,12,19,53,56,43,44,45,27,58,59,57,46,37,38,52],
    [9,16,17,15,24,25,2,8,32,33,34,5,0,14,41,42,43,44,10,1,22,23,49,50,51,45,18,3,4,21,31,40,56,46,35,26,11,6,7,13,48,59,57,52,37,36,12,20,54,55,53,58,19,29,30,47,38,27,28,39],
    [10,18,5,26,11,9,35,36,0,16,17,34,45,12,1,2,15,24,25,46,19,6,3,4,8,32,33,52,37,27,28,7,14,41,42,43,44,57,58,38,13,22,23,49,50,51,56,39,20,21,31,40,59,47,29,30,48,55,53,54],
    [11,0,18,1,2,26,3,4,5,35,36,6,7,8,9,10,34,45,12,13,14,15,16,17,25,46,19,20,21,22,23,24,33,52,37,27,28,29,30,31,32,43,44,57,58,38,39,40,41,42,51,56,47,48,49,50,59,53,54,55],
    [12,19,6,27,28,11,37,38,7,0,18,36,46,39,13,3,1,2,26,52,47,29,20,21,4,5,35,57,58,53,54,30,8,9,10,34,45,44,56,59,31,14,15,16,17,25,33,55,40,22,23,24,43,50,48,49,32,42,51,41],
    [13,20,21,29,30,4,28,39,31,8,1,7,19,47,40,22,14,15,3,27,53,54,48,49,23,2,6,37,38,58,59,55,24,5,0,11,12,36,46,52,50,32,16,9,10,18,26,57,51,41,42,17,35,44,56,43,25,34,45,33],
    [14,22,23,21,31,24,4,13,40,32,16,8,1,20,48,49,41,42,15,3,29,30,54,55,50,17,2,6,7,28,39,47,51,25,9,5,0,11,12,19,53,56,43,33,34,10,18,27,58,59,57,44,26,37,38,52,45,35,36,46],
    [15,2,8,5,0,14,9,10,1,22,23,16,17,18,3,4,21,31,24,25,26,11,6,7,13,40,32,33,34,35,36,12,20,48,49,41,42,43,44,45,19,29,30,54,55,50,51,46,27,28,39,47,56,52,37,38,53,59,57,58],
    [16,15,24,2,8,32,5,0,14,41,42,9,10,1,22,23,49,50,17,18,3,4,21,31,40,51,25,26,11,6,7,13,48,56,43,33,34,35,36,12,20,54,55,59,57,44,45,19,29,30,47,53,46,27,28,39,58,52,37,38],
    [17,25,9,33,34,16,43,44,10,15,24,42,51,45,18,5,2,8,32,56,46,35,26,11,0,14,41,59,57,52,37,36,1,22,23,49,50,55,53,58,12,3,4,21,31,40,48,38,19,6,7,13,54,39,27,28,20,30,47,29],
    [18,26,11,35,36,0,34,45,12,1,2,10,25,46,19,6,3,4,5,33,52,37,27,28,7,8,9,43,44,57,58,38,13,14,15,16,17,42,51,56,39,20,21,22,23,24,32,59,47,29,30,31,41,55,53,54,40,49,50,48],
    [19,27,28,37,38,7,36,46,39,13,3,12,26,52,47,29,20,21,6,35,57,58,53,54,30,4,11,34,45,44,56,59,31,8,1,0,18,10,25,33,55,40,22,14,15,2,5,43,50,48,49,23,9,42,51,41,24,16,17,32],
    [20,29,30,28,39,31,7,19,47,40,22,13,3,27,53,54,48,49,21,6,37,38,58,59,55,23,4,11,12,36,46,52,50,24,14,8,1,0,18,26,57,51,41,32,16,15,2,35,44,56,43,42,5,34,45,33,17,9,10,25],
    [21,4,13,8,1,20,14,15,3,29,30,22,23,2,6,7,28,39,31,24,5,0,11,12,19,47,40,32,16,9,10,18,27,53,54,48,49,41,42,17,26,37,38,58,59,55,50,25,35,36,46,52,51,33,34,45,57,56,43,44],
    [22,21,31,4,13,40,8,1,20,48,49,14,15,3,29,30,54,55,23,2,6,7,28,39,47,50,24,5,0,11,12,19,53,51,41,32,16,9,10,18,27,58,59,56,43,42,17,26,37,38,52,57,25,35,36,46,44,33,34,45],
    [23,24,14,32,16,22,41,42,15,21,31,49,50,17,2,8,4,13,40,51,25,9,5,0,1,20,48,56,43,33,34,10,3,29,30,54,55,59,57,44,18,6,7,28,39,47,53,45,26,11,12,19,58,46,35,36,27,38,52,37],
    [24,32,16,41,42,15,49,50,17,2,8,23,40,51,25,9,5,0,14,48,56,43,33,34,10,1,22,54,55,59,57,44,18,3,4,21,31,30,47,53,45,26,11,6,7,13,20,58,46,35,36,12,29,38,52,37,19,28,39,27],
    [25,33,34,43,44,10,42,51,45,18,5,17,32,56,46,35,26,11,9,41,59,57,52,37,36,0,16,49,50,55,53,58,12,1,2,15,24,23,40,48,38,19,6,3,4,8,14,54,39,27,28,7,22,30,47,29,13,21,31,20],
    [26,35,36,34,45,12,10,25,46,19,6,18,5,33,52,37,27,28,11,9,43,44,57,58,38,7,0,16,17,42,51,56,39,13,3,1,2,15,24,32,59,47,29,20,21,4,8,41,55,53,54,30,14,49,50,48,31,22,23,40],
    [27,37,38,36,46,39,12,26,52,47,29,19,6,35,57,58,53,54,28,11,34,45,44,56,59,30,7,0,18,10,25,33,55,31,20,13,3,1,2,5,43,50,48,40,22,21,4,9,42,51,41,49,8,16,17,32,23,14,15,24],
    [28,7,19,13,3,27,20,21,6,37,38,29,30,4,11,12,36,46,39,31,8,1,0,18,26,52,47,40,22,14,15,2,35,57,58,53,54,48,49,23,5,34,45,44,56,59,55,24,9,10,25,33,50,32,16,17,43,51,41,42],
    [29,28,39,7,19,47,13,3,27,53,54,20,21,6,37,38,58,59,30,4,11,12,36,46,52,55,31,8,1,0,18,26,57,50,48,40,22,14,15,2,35,44,56,51,41,49,23,5,34,45,33,43,24,9,10,25,42,32,16,17],
    [30,31,20,40,22,29,48,49,21,28,39,54,55,23,4,13,7,19,47,50,24,14,8,1,3,27,53,51,41,32,16,15,6,37,38,58,59,56,43,42,2,11,12,36,46,52,57,17,5,0,18,26,44,25,9,10,35,45,33,34],
    [31,40,22,48,49,21,54,55,23,4,13,30,47,50,24,14,8,1,20,53,51,41,32,16,15,3,29,58,59,56,43,42,2,6,7,28,39,38,52,57,17,5,0,11,12,19,27,44,25,9,10,18,37,45,33,34,26,36,46,35],
    [32,41,42,49,50,17,23,40,51,25,9,24,14,48,56,43,33,34,16,22,54,55,59,57,44,10,15,21,31,30,47,53,45,18,5,2,8,4,13,20,58,46,35,26,11,0,1,29,38,52,37,36,3,28,39,27,12,6,7,19],
    [33,43,44,42,51,45,17,32,56,46,35,25,9,41,59,57,52,37,34,16,49,50,55,53,58,36,10,15,24,23,40,48,38,12,26,18,5,2,8,14,54,39,27,19,6,11,0,22,30,47,29,28,1,21,31,20,7,3,4,13],
    [34,10,25,18,5,33,26,11,9,43,44,35,36,0,16,17,42,51,45,12,1,2,15,24,32,56,46,19,6,3,4,8,41,59,57,52,37,27,28,7,14,49,50,55,53,58,38,13,22,23,40,48,39,20,21,31,54,47,29,30],
    [35,34,45,10,25,46,18,5,33,52,37,26,11,9,43,44,57,58,36,0,16,17,42,51,56,38,12,1,2,15,24,32,59,39,27,19,6,3,4,8,41,55,53,47,29,28,7,14,49,50,48,54,13,22,23,40,30,20,21,31],
    [36,12,26,19,6,35,27,28,11,34,45,37,38,7,0,18,10,25,46,39,13,3,1,2,5,33,52,47,29,20,21,4,9,43,44,57,58,53,54,30,8,16,17,42,51,56,59,31,14,15,24,32,55,40,22,23,41,50,48,49],
    [37,36,46,12,26,52,19,6,35,57,58,27,28,11,34,45,44,56,38,7,0,18,10,25,33,59,39,13,3,1,2,5,43,55,53,47,29,20,21,4,9,42,51,50,48,54,30,8,16,17,32,41,31,14,15,24,49,40,22,23],
    [38,39,27,47,29,37,53,54,28,36,46,58,59,30,7,19,12,26,52,55,31,20,13,3,6,35,57,50,48,40,22,21,11,34,45,44,56,51,41,49,4,0,18,10,25,33,43,23,8,1,2,5,42,24,14,15,9,17,32,16],
    [39,47,29,53,54,28,58,59,30,7,19,38,52,55,31,20,13,3,27,57,50,48,40,22,21,6,37,44,56,51,41,49,4,11,12,36,46,45,33,43,23,8,1,0,18,26,35,42,24,14,15,2,34,17,32,16,5,10,25,9],
    [40,48,49,54,55,23,30,47,50,24,14,31,20,53,51,41,32,16,22,29,58,59,56,43,42,15,21,28,39,38,52,57,17,2,8,4,13,7,19,27,44,25,9,5,0,1,3,37,45,33,34,10,6,36,46,35,18,11,12,26],
    [41,49,50,23,40,51,24,14,48,56,43,32,16,22,54,55,59,57,42,15,21,31,30,47,53,44,17,2,8,4,13,20,58,45,33,25,9,5,0,1,29,38,52,46,35,34,10,3,28,39,27,37,18,6,7,19,36,26,11,12],
    [42,17,32,25,9,41,33,34,16,49,50,43,44,10,15,24,23,40,51,45,18,5,2,8,14,48,56,46,35,26,11,0,22,54,55,59,57,52,37,36,1,21,31,30,47,53,58,12,3,4,13,20,38,19,6,7,29,39,27,28],
    [43,42,51,17,32,56,25,9,41,59,57,33,34,16,49,50,55,53,44,10,15,24,23,40,48,58,45,18,5,2,8,14,54,38,52,46,35,26,11,0,22,30,47,39,27,37,36,1,21,31,20,29,12,3,4,13,28,19,6,7],
    [44,45,33,46,35,43,52,37,34,42,51,57,58,36,10,25,17,32,56,38,12,26,18,5,9,41,59,39,27,19,6,11,16,49,50,55,53,47,29,28,0,15,24,23,40,48,54,7,1,2,8,14,30,13,3,4,22,31,20,21],
    [45,46,35,52,37,34,57,58,36,10,25,44,56,38,12,26,18,5,33,59,39,27,19,6,11,9,43,55,53,47,29,28,0,16,17,42,51,50,48,54,7,1,2,15,24,32,41,30,13,3,4,8,49,31,20,21,14,23,40,22],
    [46,52,37,57,58,36,44,56,38,12,26,45,33,59,39,27,19,6,35,43,55,53,47,29,28,11,34,42,51,50,48,54,7,0,18,10,25,17,32,41,30,13,3,1,2,5,9,49,31,20,21,4,16,23,40,22,8,15,24,14],
    [47,53,54,58,59,30,38,52,55,31,20,39,27,57,50,48,40,22,29,37,44,56,51,41,49,21,28,36,46,45,33,43,23,4,13,7,19,12,26,35,42,24,14,8,1,3,6,34,17,32,16,15,11,10,25,9,2,0,18,5],
    [48,54,55,30,47,50,31,20,53,51,41,40,22,29,58,59,56,43,49,21,28,39,38,52,57,42,23,4,13,7,19,27,44,17,32,24,14,8,1,3,37,45,33,25,9,16,15,6,36,46,35,34,2,11,12,26,10,5,0,18],
    [49,23,40,24,14,48,32,16,22,54,55,41,42,15,21,31,30,47,50,17,2,8,4,13,20,53,51,25,9,5,0,1,29,58,59,56,43,33,34,10,3,28,39,38,52,57,44,18,6,7,19,27,45,26,11,12,37,46,35,36],
    [50,51,41,56,43,49,59,57,42,23,40,55,53,44,17,32,24,14,48,58,45,33,25,9,16,22,54,38,52,46,35,34,15,21,31,30,47,39,27,37,10,2,8,4,13,20,29,36,18,5,0,1,28,12,26,11,3,7,19,6],
    [51,56,43,59,57,42,55,53,44,17,32,50,48,58,45,33,25,9,41,54,38,52,46,35,34,16,49,30,47,39,27,37,10,15,24,23,40,31,20,29,36,18,5,2,8,14,22,28,12,26,11,0,21,7,19,6,1,4,13,3],
    [52,57,58,44,56,38,45,33,59,39,27,46,35,43,55,53,47,29,37,34,42,51,50,48,54,28,36,10,25,17,32,41,30,7,19,12,26,18,5,9,49,31,20,13,3,6,11,16,23,40,22,21,0,15,24,14,4,1,2,8],
    [53,58,59,38,52,55,39,27,57,50,48,47,29,37,44,56,51,41,54,28,36,46,45,33,43,49,30,7,19,12,26,35,42,23,40,31,20,13,3,6,34,17,32,24,14,22,21,11,10,25,9,16,4,0,18,5,15,8,1,2],
    [54,30,47,31,20,53,40,22,29,58,59,48,49,21,28,39,38,52,55,23,4,13,7,19,27,57,50,24,14,8,1,3,37,44,56,51,41,32,16,15,6,36,46,45,33,43,42,2,11,12,26,35,17,5,0,18,34,25,9,10],
    [55,50,48,51,41,54,56,43,49,30,47,59,57,42,23,40,31,20,53,44,17,32,24,14,22,29,58,45,33,25,9,16,21,28,39,38,52,46,35,34,15,4,13,7,19,27,37,10,2,8,1,3,36,18,5,0,6,12,26,11],
    [56,59,57,55,53,44,50,48,58,45,33,51,41,54,38,52,46,35,43,49,30,47,39,27,37,34,42,23,40,31,20,29,36,10,25,17,32,24,14,22,28,12,26,18,5,9,16,21,7,19,6,11,15,4,13,3,0,2,8,1],
    [57,44,56,45,33,59,46,35,43,55,53,52,37,34,42,51,50,48,58,36,10,25,17,32,41,54,38,12,26,18,5,9,49,30,47,39,27,19,6,11,16,23,40,31,20,29,28,0,15,24,14,22,7,1,2,8,21,13,3,4],
    [58,38,52,39,27,57,47,29,37,44,56,53,54,28,36,46,45,33,59,30,7,19,12,26,35,43,55,31,20,13,3,6,34,42,51,50,48,40,22,21,11,10,25,17,32,41,49,4,0,18,5,9,23,8,1,2,16,24,14,15],
    [59,55,53,50,48,58,51,41,54,38,52,56,43,49,30,47,39,27,57,42,23,40,31,20,29,37,44,17,32,24,14,22,28,36,46,45,33,25,9,16,21,7,19,12,26,35,34,15,4,13,3,6,10,2,8,1,11,18,5,0],
]


[(_, trivial)] = ix_op_pairs_from_ids(1, [1])
[(_, C2)] = ix_op_pairs_from_ids(2, [2])
[(_, C3)] = ix_op_pairs_from_ids(3, [18])
[(_, C4)] = ix_op_pairs_from_ids(4, [37])
[(_, V4)] = ix_op_pairs_from_ids(4, [7])
[(_, C5)] = ix_op_pairs_from_ids(5, [1160])
[(_, C6)] = ix_op_pairs_from_ids(6, [14996])
[(_, D6)] = ix_op_pairs_from_ids(6, [4337])
[(_, C7)] = ix_op_pairs_from_ids(7, [836017])
_eight = dict(ix_op_pairs_from_ids(8, [10280767, 4711892, 28256, 10200808, 630975]))
C8 = _eight[10280767]
C4C2 = _eight[4711892]
C2C2C2 = _eight[28256]
Q8 = _eight[10200808]
D8 = _eight[630975]

GROUPS = [
    trivial, C2, C3,
    C4, V4, C5, C6, D6, C7,
    C8, C4C2, C2C2C2, Q8, D8,
    A5
]

def test_groups():
    assert normal_subgroup_generated_by([[0,1],[1,0]], [0,1], [1]) == {0, 1}
    assert normal_subgroup_generated_by([[0,1],[1,0]], [0,1], [0]) == {0}
    for op0 in GROUPS * 3:
        op = shuffle_op_elements(op0)
        rn = range(len(op))

        # test inverses
        e, inv = group_identity_and_inverses(op, rn)
        for x in rn:
            assert op[e][x] == x
            assert op[x][e] == x
            assert op[inv[x]][x] == e
            assert op[x][inv[x]] == e

        # test normal subgroups and quotients
        normals = set()
        for num_elements_to_kill in [0,1,2]:
            for to_kill in combinations(rn, num_elements_to_kill):
                N = normal_subgroup_generated_by(op, rn, to_kill)
                assert set(to_kill) <= N
                normals.add(frozenset(N))
        for N in normals:
            assert e in N
            # normality
            for Nelt in N:
                for g in rn:
                    assert op[op[g][Nelt]][inv[g]] in N
            # N is kernel
            proj, result_op = group_quotient(op, rn, N)
            for x in rn:
                for y in rn:
                    assert proj[op[x][y]] == result_op[proj[x]][proj[y]]
            [result_e] = [e for e in range(len(result_op)) if result_op[e][e] == e]
            for z in range(len(result_op)):
                assert result_op[z][result_e] == z == result_op[result_e][z]
            assert N == {x for x in rn if proj[x] == result_e}, (op, N, proj, result_op)

def test_A5_is_simple():
    for _ in range(5):
        op = shuffle_op_elements(A5)
        rn = range(len(op))
        [e] = [e for e in rn if op[e][e] == e]
        for x in rn:
            if x == e:
                continue
            N = normal_subgroup_generated_by(op, rn, [x])
            assert N == set(rn)

def rho_monoid(a, b):
    # < x | x^a == x^b >
    assert a < b
    def p(x):
        while x >= b:
            x -= (b - a)
        return x
    return [
        [
            p(i + j)
            for j in range(b)
        ]
        for i in range(b)
    ]

def test_group_completion_rho():
    def generate(op, g):
        x = g
        s = {g}
        while True:
            x = op[x][g]
            if x in s:
                return s
            s.add(x)
    for b in range(5):
        for a in range(b):
            M = rho_monoid(a, b)
            proj, GM_op = group_completion(M)
            # GM is Z/(b-a)Z
            assert len(GM_op) == b - a
            assert any(
                len(generate(GM_op, x)) == len(GM_op)
                for x in range(len(GM_op))
            )

def test_group_completion_of_group():
    for op in GROUPS:
        proj, result_op = group_completion(op)
        assert len(result_op) == len(op)
        assert set(proj) == set(range(len(result_op)))
        rn = range(len(op))
        for x in rn:
            for y in rn:
                assert proj[op[x][y]] == result_op[proj[x]][proj[y]]

def test_group_completion_is_homomorphism():
    for n in (1, 2, 3, 4, 5):
        rn = range(n)
        for ix, op in all_ix_op_pairs(n):
            proj, result_op = group_completion(op)
            assert len(proj) == len(op)
            assert set(proj) == set(range(len(result_op)))
            for x in rn:
                for y in rn:
                    assert proj[op[x][y]] == result_op[proj[x]][proj[y]]

def test_group_completion_of_product():
    op_completion_size = [
        (op, len(group_completion(op)[1]))
        for n in (1, 2, 3, 4)
        for ix, op in all_ix_op_pairs(n)
    ] + [
        (op, len(op))
        for op in GROUPS if 5 <= len(op) <= 8
    ]
    for op1, g1 in op_completion_size:
        for op2, g2 in op_completion_size:
            op = shuffle_op_elements(product_op(op1, op2))
            g = len(group_completion(op)[1])
            assert g == g1 * g2, (op1, op2)

def test_rees_suschkewitsch_structure_theorem():
    for G_op in GROUPS:
        if len(G_op) > 4:
            continue
        depth = len(G_op)
        for width in (1,2):
            for height in (1,2,3):
                for sandwich in product(product(range(depth), repeat=height), repeat=width):
                    def opfunc(x1g1y1, x2g2y2):
                        x1, g1, y1 = x1g1y1
                        x2, g2, y2 = x2g2y2
                        return (x1, G_op[g1][G_op[sandwich[y1][x2]][g2]], y2)
                    opset = product(range(height), range(depth), range(width))
                    op = table_from_opfunc_and_set(opfunc, opset)
                    op = shuffle_op_elements(op)

                    # check that we recover similar structure after shuffling
                    X, G, Y, sandwich = get_kernel_structure(op)
                    assert len(X) == height
                    assert len(G) == depth
                    assert len(Y) == width

                    # Check that the structure holds
                    assert {op[x][op[g][y]] for x in X for g in G for y in Y} == set(range(len(op)))
                    to_x, to_g, to_y = {}, {}, {}
                    for x in X:
                        for g in G:
                            for y in Y:
                                element = op[x][op[g][y]]
                                to_x[element], to_g[element], to_y[element] = x, g, y
                    for element1 in range(len(op)):
                        for element2 in range(len(op)):
                            element3 = op[element1][element2]
                            assert to_x[element3] == to_x[element1]
                            sw = sandwich[to_y[element1],to_x[element2]]
                            assert to_g[element3] == op[to_g[element1]][op[sw][to_g[element2]]]
                            assert to_y[element3] == to_y[element2]
